name: YAML Encryption Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.yaml'
      - '**/*.yml'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  check-yaml-encryption:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Debug context
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "SHA: ${{ github.sha }}"
        echo "PR number: ${{ github.event.pull_request.number }}"
        echo "PR head SHA: ${{ github.event.pull_request.head.sha }}"
        echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
    
    - name: Get changed files in PR
      id: changed-files
      run: |
        chmod +x .github/scripts/get-changed-files.sh
        .github/scripts/get-changed-files.sh
    
    - name: Run YAML encryption check on changed files
      if: env.HAS_CHANGED_FILES == 'true'
      id: encryption-check
      run: |
        chmod +x .github/scripts/check-encryption.sh
        .github/scripts/check-encryption.sh
        echo "script_exit_code=$?" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Set PR variables
      id: pr-info
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "head_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "is_pr=true" >> $GITHUB_OUTPUT
        else
          echo "head_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "is_pr=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create PR comment for encrypted files
      if: env.UNENCRYPTED_COUNT == '0' && env.ENCRYPTED_COUNT != '0' && steps.pr-info.outputs.is_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## 🔒 YAML Encryption Check - PASSED ✅
          
          All changed files matching encryption patterns are properly encrypted!
          
          **Summary:**
          - 📁 Changed encrypted files: ${process.env.ENCRYPTED_COUNT}
          - ✅ All required files are encrypted based on .gitattributes patterns
          
          The pull request can be safely merged. 🚀`;
          
          await github.rest.issues.createComment({
            issue_number: ${{ steps.pr-info.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create PR comment for unencrypted files
      if: env.UNENCRYPTED_COUNT != '0' && steps.pr-info.outputs.is_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const unencryptedFiles = process.env.UNENCRYPTED_FILES || '';
          const filesList = unencryptedFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n');
          
          const comment = `## 🚨 YAML Encryption Check - FAILED ❌
          
          **Security Warning:** Unencrypted files detected that should be encrypted according to .gitattributes patterns!
          
          **Summary:**
          - 📁 Total files checked: ${parseInt(process.env.ENCRYPTED_COUNT || '0') + parseInt(process.env.UNENCRYPTED_COUNT || '0')}
          - ✅ Encrypted files: ${process.env.ENCRYPTED_COUNT || '0'}
          - ❌ **Unencrypted files: ${process.env.UNENCRYPTED_COUNT || '0'}**
          
          **Unencrypted files found in this PR:**
          ${filesList}
          
          **⚠️ Action Required:**
          Please encrypt these files before merging this pull request. Files matching patterns in .gitattributes should be encrypted using git-crypt.
          
          **How to fix:**
          1. Ensure git-crypt is set up in your repository.
          2. Encrypt the files using git-crypt and file name should be match "__*.yaml".
          3. If unencrypted secret push to pull request delete the branch and create it again follow this [https://verve.atlassian.net/wiki/spaces/TECH/pages/15920365615/ArgoCD+Secrets+deployment+app-admin].
          4. Push the new changes, the check will run automatically again.
          
          **🔒 Merge is currently blocked until all files are encrypted.**`;
          
          await github.rest.issues.createComment({
            issue_number: ${{ steps.pr-info.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Block merge if unencrypted files found
      if: env.UNENCRYPTED_COUNT != '0'
      uses: actions/github-script@v7
      with:
        script: |
          // Create a check run that fails, which will block merge
          const headSha = '${{ steps.pr-info.outputs.head_sha }}'
          const checkRun = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'YAML Encryption Validation',
            head_sha: headSha,
            status: 'completed',
            conclusion: 'failure',
            output: {
              title: 'Unencrypted files detected in PR changes',
              summary: `Found ${process.env.UNENCRYPTED_COUNT} unencrypted files that should be encrypted according to .gitattributes patterns.`,
              text: `The following files need to be encrypted:\n\n${process.env.UNENCRYPTED_FILES || 'No files listed'}`
            }
          });
          
          // Also set the action as failed
          core.setFailed(`Found ${process.env.UNENCRYPTED_COUNT} unencrypted files that should be encrypted`);
    
    - name: Success check for encrypted files
      if: env.UNENCRYPTED_COUNT == '0' && env.ENCRYPTED_COUNT != '0'
      uses: actions/github-script@v7
      with:
        script: |
          // Create a successful check run
          const headSha = '${{ steps.pr-info.outputs.head_sha }}'
          const checkRun = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'YAML Encryption Validation',
            head_sha: headSha,
            status: 'completed',
            conclusion: 'success',
            output: {
              title: 'All required files are encrypted',
              summary: `Successfully verified ${process.env.ENCRYPTED_COUNT} files that match encryption patterns.`,
              text: 'All files matching encryption patterns in .gitattributes are properly encrypted. ✅'
            }
          });
    
    - name: Handle no changed files case
      if: env.HAS_CHANGED_FILES == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          // Only comment if this is a pull request
          if ('${{ steps.pr-info.outputs.is_pr }}' === 'true') {
            const comment = `## 🔍 YAML Encryption Check - NO FILES TO CHECK ℹ️
            
            No files matching encryption patterns were changed in this pull request.
            
            The encryption check validates files based on patterns defined in .gitattributes that require git-crypt encryption.`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ steps.pr-info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
          
          // Create a neutral check run
          const headSha = '${{ steps.pr-info.outputs.head_sha }}'
          const checkRun = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'YAML Encryption Validation',
            head_sha: headSha,
            status: 'completed',
            conclusion: 'neutral',
            output: {
              title: 'No files to check for encryption',
              summary: 'No files matching encryption patterns were changed in this PR.',
              text: 'This PR does not contain any changes to files that require encryption.'
            }
          });
    
    - name: Summary
      run: |
        echo "=== YAML Encryption Check Summary ==="
        if [ "${{ env.HAS_CHANGED_FILES }}" = "true" ]; then
          echo "Files requiring encryption: ${ENCRYPTED_COUNT:-0}"
          echo "Unencrypted files found: ${UNENCRYPTED_COUNT:-0}"
          echo "Check result: ${{ steps.encryption-check.outputs.script_exit_code == '0' && 'PASSED' || 'FAILED' }}"
          
          if [ "${UNENCRYPTED_COUNT:-0}" != "0" ]; then
            echo "⚠️ Action failed due to unencrypted files"
            exit 1
          fi
        else
          echo "No files requiring encryption checks were changed"
        fi

  validate-kubernetes-yaml:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history
        ref: ${{ github.event.pull_request.head.sha }}  # Checkout the PR head
        
    # Add this step to ensure we have the base branch
    - name: Fetch base branch
      run: |
        git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
        echo "Base branch ${{ github.base_ref }} fetched successfully"

    - name: Setup kubeconform
      uses: yokawasa/action-setup-kube-tools@v0.11.2
      with:
        kubeconform: '0.6.4'

    - name: Verify kubeconform installation
      run: kubeconform -v
    - name: Set environment variables
      run: |
        echo "ANY_CHANGED=${{ steps.changed-k8s-files.outputs.any_changed }}" >> $GITHUB_ENV
        echo "ALL_CHANGED_FILES='${{ steps.changed-k8s-files.outputs.all_changed_files }}'" >> $GITHUB_ENV

    - name: Install git-crypt
      run: |
        sudo apt-get update
        sudo apt-get install -y git-crypt
        git-crypt --version

    - name: Unlock git-crypt (if key is available)
      env:
        GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}
      run: |
        if [ -n "$GIT_CRYPT_KEY" ]; then
          echo "$GIT_CRYPT_KEY" | base64 -d > git-crypt-key
          echo "$GIT_CRYPT_KEY"
          ls -l "$GIT_CRYPT_KEY"
          chmod +X git-crypt-key
          git-crypt unlock git-crypt-key --force
          rm git-crypt-key
          echo "🔓 Repository unlocked"

           # Verify unlock worked
          echo "🔍 Checking git-crypt status after unlock:"
          git-crypt status | head -10

           # Test decryption of your specific files
           echo "📝 Testing file content after unlock:"
          if [ -f "secrets/__abc.yaml" ]; then
            echo "secrets/__abc.yaml first line:"
            head -n 1 "secrets/__abc.yaml" | hexdump -C
          fi
        else
          echo "⚠️ No git-crypt key provided - encrypted files will be skipped"
        fi

    - name: Make script executable
      run: chmod +x .github/scripts/get-k8s-files.sh

    - name: Identify Kubernetes files
      run: .github/scripts/get-k8s-files.sh
    
    - name: Validate changed Kubernetes YAML files
      if: env.K8S_FILES_FOUND == 'true'
      id: kubeconform-check
      run: |
        chmod +x .github/scripts/validate-kubernetes-yaml.sh
        .github/scripts/validate-kubernetes-yaml.sh
      continue-on-error: true
    
    - name: Set PR variables for kubeconform
      id: kubeconform-pr-info
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "head_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "is_pr=true" >> $GITHUB_OUTPUT
        else
          echo "head_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "is_pr=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create PR comment for valid K8s files
      if: env.INVALID_K8S_FILES == '0' && env.VALID_K8S_FILES != '0' && steps.kubeconform-pr-info.outputs.is_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const validFiles = process.env.VALID_FILES_LIST || '';
          const validFilesList = validFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n');
          
          const skippedFiles = process.env.SKIPPED_FILES_LIST || '';
          const skippedFilesList = skippedFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n');
          const skippedCount = process.env.SKIPPED_K8S_FILES || '0';
          
          let comment = `## ⚙️ Kubernetes YAML Validation - PASSED ✅
          
          All changed Kubernetes YAML files are valid and conform to the Kubernetes API schema!
          
          **Summary:**
          - 📄 Changed K8s files validated: ${process.env.TOTAL_K8S_FILES}
          - ✅ Valid files: ${process.env.VALID_K8S_FILES}
          - ❌ Invalid files: 0
          - ⏭️ Skipped files (missing schemas): ${skippedCount}
          
          **✅ Valid changed files:**
          ${validFilesList}`;
          
          if (skippedCount !== '0' && skippedFilesList) {
            comment += `\n\n**⏭️ Skipped changed files (missing schemas):**
          ${skippedFilesList}
          
          *Note: Files were skipped because their Kubernetes resource schemas are not available in kubeconform's schema database. This is normal for CRDs or newer API versions.*`;
          }
          
          comment += `\n\n**Validation performed using kubeconform** with strict mode and missing schema handling.
          
          Your Kubernetes manifests are ready for deployment! 🚀`;
          
          await github.rest.issues.createComment({
            issue_number: ${{ steps.kubeconform-pr-info.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create PR comment for invalid K8s files
      if: env.INVALID_K8S_FILES != '0' && steps.kubeconform-pr-info.outputs.is_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const invalidFiles = process.env.INVALID_FILES_LIST || '';
          const invalidFilesList = invalidFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n');
          
          const validFiles = process.env.VALID_FILES_LIST || '';
          const validFilesList = validFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n');
          
          const skippedFiles = process.env.SKIPPED_FILES_LIST || '';
          const skippedFilesList = skippedFiles ? skippedFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n') : '';
          const skippedCount = process.env.SKIPPED_K8S_FILES || '0';
          
          console.log('Debug - SKIPPED_K8S_FILES:', process.env.SKIPPED_K8S_FILES);
          console.log('Debug - SKIPPED_FILES_LIST raw:', JSON.stringify(process.env.SKIPPED_FILES_LIST));
          console.log('Debug - skippedFilesList processed:', skippedFilesList);
          console.log('Debug - skippedCount:', skippedCount);
          
          let comment = `## ⚠️ Kubernetes YAML Validation - FAILED ❌
          
          **Validation Error:** Some changed Kubernetes YAML files failed validation against the Kubernetes API schema!
          
          **Summary:**
          - 📄 Changed K8s files checked: ${process.env.TOTAL_K8S_FILES}
          - ✅ Valid files: ${process.env.VALID_K8S_FILES}
          - ❌ **Invalid files: ${process.env.INVALID_K8S_FILES}**
          - ⏭️ Skipped files (missing schemas): ${skippedCount}
          
          **❌ Invalid changed files:**
          ${invalidFilesList}`;
          
          if (validFilesList) {
            comment += `\n\n**✅ Valid changed files:**
          ${validFilesList}`;
          }
          
          if (parseInt(skippedCount) > 0 && skippedFilesList.length > 0) {
            comment += `\n\n**⏭️ Skipped changed files (missing schemas):**
          ${skippedFilesList}
          
          *Note: Files were skipped because current version validates Kubernetes objects not CRD or argo objects.*`;
          }
          
          comment += `\n\n**🔧 How to fix:**
          1. Review the kubernetes yaml file once.
          2. Check for typos in field names, incorrect indentation, or invalid values.
          3. Fix the issues and push your changes
          
          **🔒 Consider blocking merge until validation passes.**`;
          
          await github.rest.issues.createComment({
            issue_number: ${{ steps.kubeconform-pr-info.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create check for K8s validation results
      if: env.K8S_FILES_FOUND == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const conclusion = process.env.INVALID_K8S_FILES === '0' ? 'success' : 'failure';
          const title = process.env.INVALID_K8S_FILES === '0' 
            ? 'All changed Kubernetes YAML files are valid' 
            : 'Changed Kubernetes YAML validation failed';
          
          const validCount = process.env.VALID_K8S_FILES || '0';
          const invalidCount = process.env.INVALID_K8S_FILES || '0';
          const skippedCount = process.env.SKIPPED_K8S_FILES || '0';
          const totalCount = process.env.TOTAL_K8S_FILES || '0';
          
          const summary = process.env.INVALID_K8S_FILES === '0'
            ? `Successfully validated ${validCount} changed Kubernetes YAML files using kubeconform (${skippedCount} files skipped due to missing schemas)`
            : `Found ${invalidCount} invalid Kubernetes YAML files out of ${totalCount} changed files (${skippedCount} files skipped due to missing schemas)`;
          
          let text = '';
          if (process.env.VALID_FILES_LIST) {
            text += `Valid changed files:\n${process.env.VALID_FILES_LIST}\n\n`;
          }
          if (process.env.INVALID_FILES_LIST) {
            text += `Invalid changed files:\n${process.env.INVALID_FILES_LIST}\n\n`;
          }
          if (process.env.SKIPPED_FILES_LIST) {
            text += `Skipped changed files (missing schemas):\n${process.env.SKIPPED_FILES_LIST}`;
          }
          
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Kubernetes YAML Validation (kubeconform)',
            head_sha: '${{ steps.kubeconform-pr-info.outputs.head_sha }}',
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: title,
              summary: summary,
              text: text || 'No details available'
            }
          });
          
          if (process.env.INVALID_K8S_FILES !== '0') {
            core.setFailed(`Found ${process.env.INVALID_K8S_FILES} invalid changed Kubernetes YAML files`);
          }
    
    - name: Handle no changed K8s files case
      if: env.K8S_FILES_FOUND == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          // Only comment if this is a pull request
          if ('${{ steps.kubeconform-pr-info.outputs.is_pr }}' === 'true') {
            const comment = `## ⚙️ Kubernetes YAML Validation - NO CHANGED FILES ℹ️
            
            No Kubernetes YAML files were changed in this pull request.
            
            **Search criteria for changed files:**
            - Files with paths containing: k8s, kubernetes, manifests, deployment, service, ingress, configmap, secret
            - Files containing \`apiVersion:\` or \`kind:\` fields
            
            The validation only checks files that are added, modified, or renamed in the PR.`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ steps.kubeconform-pr-info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
          
          // Create a neutral check run
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Kubernetes YAML Validation (kubeconform)',
            head_sha: '${{ steps.kubeconform-pr-info.outputs.head_sha }}',
            status: 'completed',
            conclusion: 'neutral',
            output: {
              title: 'No changed Kubernetes YAML files to validate',
              summary: 'No Kubernetes YAML files changed in this PR.',
              text: 'This PR does not contain any changes to files that appear to be Kubernetes manifests.'
            }
          });
    
    - name: Kubeconform Summary
      run: |
        echo "=== Kubernetes YAML Validation Summary (kubeconform) ==="
        if [ "${{ env.K8S_FILES_FOUND }}" = "true"